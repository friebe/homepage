---
// @ts-ignore
import { db, Guestbook } from "astro:db";
import { z } from "astro:content";
import Layout from "../components/PageLayout.astro";
let fieldErrors: FieldErrors = {};

interface FieldErrors {
    [fieldName: string]: string;
}
interface ReturnValue {
    success: boolean;
    errors: FieldErrors;
}

const formShema = z.object({
    author: z.string().min(2, { message: "Must be 3 or more characters long" }),
    message: z
        .string()
        .min(2, { message: "Must be 3 or more characters long" }),
});

const parseInput = (input: any): ReturnValue => {
    try {
        formShema.parse(input);
        return { success: true, errors: fieldErrors };
    } catch (err) {
        if (err instanceof z.ZodError) {
            const fieldErrors = errorMap(err);
            console.log(err);
            return { success: false, errors: fieldErrors };
        } else {
            return { success: false, errors: { general: "An error occurred" } };
        }
    }
};

if (Astro.request.method === "POST") {
    const formData = await Astro.request.formData();
    const data = Object.fromEntries(formData);

    const result = parseInput(data);

    if ("errors" in result) {
        fieldErrors = result.errors;
    } else {
        // @ts-ignore
        await db.insert(Guestbook).values(result.data);
    }
}

function errorMap(zodError: z.ZodError): FieldErrors {
    const fieldErrors: FieldErrors = {};

    zodError.errors.forEach((err) => {
        if (err.path.length > 0) {
            const fieldName = err.path[0];
            fieldErrors[fieldName] = err.message;
        }
    });

    return fieldErrors;
}

// @ts-ignore
const guestbooks = await db.select().from(Guestbook);
---

<Layout title="Guestbook">
    <div class="md:space-x-12 grid grid-cols-subgrid col-span-3">
        <h1 class="text-xl text-zinc-400 md:text-right">Guestbook</h1>
        <div class="">
            <form method="POST" id="myForm" class="pb-5 max-w-sm">
                <div class="mb-5">
                    <label for="author" class="block mb-2 text-sm font-small"
                        >Author</label
                    >
                    <input
                        type="text"
                        id="name"
                        name="author"
                        class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
                    />
                    {
                        fieldErrors && (
                            <span class="text-yellow-500 text-xs italic">
                                {fieldErrors.author}
                            </span>
                        )
                    }
                </div>
                <div class="mb-5">
                    <label for="message" class="block mb-2 text-sm font-medium"
                        >Message</label
                    >
                    <input
                        type="text"
                        name="message"
                        id="message"
                        class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
                    />
                    {
                        fieldErrors && (
                            <span class="text-yellow-500 text-xs italic">
                                {fieldErrors.message}
                            </span>
                        )
                    }
                </div>
                <button
                    type="submit"
                    class="text-white bg-orange-600 hover:bg-orange-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center"
                    >Submit</button
                >
            </form>

            {
                // @ts-ignore
                guestbooks.map(({ author, message, date }) => (
                    <div class="flex-row">
                        <div class="m-0">
                            {author}
                            <span class="mx-1">â€¢</span>
                            {date.toString().slice(0, 10)}
                            <p class="mt-0">{message}</p>
                        </div>
                    </div>
                ))
            }
        </div>
    </div>
</Layout>
